comandos mais usuais:

usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

*********************************************************************************

Clonando repositórios:

Para clonar um repositório do Github, basta usar o comando git clone URL, substituindo URL pelo endereço de clonagem do Github. Como vimos em aula, o endereço de clonagem pode ser encontrado na página do repositório, ou adicionando-se o final .git ao endereço da página do repositório.

Por exemplo: o projeto repositório é visualizável pela página https://github.com/jcfonsecagit/repositorio. Basta adicionar .git ao final para obter a URL para clonagem.

Faça o teste! Clone o projeto com o comando a seguir e depois veja que arquivos foram copiados para o seu computador!

git clone https://github.com/jcfonsecagit/repositorio.git



Ao clonar um repositório, o Git vai te mostrar o progresso e enfim uma mensagem de sucesso, mais ou menos assim:

$ git clone https://github.com/jcfonsecagit/repositorio.git
Cloning into 'repositorio'...
remote: Counting objects: 18, done.
remote: Total 18 (delta 0), reused 0 (delta 0), pack-reused 18
Unpacking objects: 100% (18/18), done.
$

Para navegar pelo repositório, basta entrar no diretório criado, que pode ser visto entre aspas na primeira linha da saída ali acima, Cloning into 'repositorio'..., então basta usar o comando cd repositorio e então visualizar os arquivos que foram baixados com o comando ls (caso utilize windows, ao invés de ls digite dir em seu terminal).

A saída deve ser mais ou menos assim:

$ cd repositorio
$ ls
index.html
$

*********************************************************************************

resumo de camandos importantes:

git init -> cria um repositorio vazio ou inicializa ele caso já exista;
git ls-files -> lista os arquivos do repositório;
git status -> mostra o estado do repositório, os arquivos que estão prontos para entrarem no repositório;
git add "nome_arquivo" ou git add . -> inicia monitoração de arquivo. o "add ." inclui todos os arquivos da pasta no monitoramento;
git commit -m "criando o projeto"-> grava alterações no repositório com uma descrição entre aspas;
git log -> mostra o historico dos commits feitos;
git whatchanged-> mostra os arquivos alterados;
git whatchanged -p-> mostra em detalhes as alterações;
git remote -> mostra quais repositorios locais temos;
git push "origin" master-> envia alterações para o repositorio remoto;
git clone https://"+++" -> clona um repositorio qualquer;
